./\\\\\\\\\\\...../\\\......./\\\..../\\\\\\\\\..../\\\\\\\\\\\\\.
.\/\\\///////\\\..\/\\\......\/\\\../\\\///////\\\.\//////\\\////..
..\/\\\.....\//\\\.\/\\\......\/\\\.\//\\\....\///.......\/\\\......
...\/\\\......\/\\\.\/\\\......\/\\\..\////\\.............\/\\\......
....\/\\\......\/\\\.\/\\\......\/\\\.....\///\\...........\/\\\......
.....\/\\\......\/\\\.\/\\\......\/\\\.......\///\\\........\/\\\......
......\/\\\....../\\\..\//\\\...../\\\../\\\....\//\\\.......\/\\\......
.......\/\\\\\\\\\\\/....\///\\\\\\\\/..\///\\\\\\\\\/........\/\\\......
........\///////////........\////////......\/////////..........\///.......
=========================================================================

 Copyright (C) 2018-2022 Politecnico di Milano,
                           with support from A^3 from Airbus
                    and  Davide   Montagnani,
                         Matteo   Tugnoli,
                         Federico Fonte


Installation instructions for DUST



REQUIREMENTS:
-------------------------------------------------------------------------------
 to build dust are required:
 * A Fortran compiler
 * CMake
 * A Lapack/BLAS implementation
 * An HDF5 library
 * A CGNS library

A Fortran compiler, CMake and a Lapack implementation can be found pre-packed 
in most linux distributions.

DUST building and installation:
-------------------------------------------------------------------------------
On a fairly recent linux system a standard build and installation boils down to:
1) Create a build folder inside this folder (can be "build" or anything else)
   and move into it:
  mkdir build && cd build

2) Configure cmake with standard options:
  cmake ../

3) Build DUST:
  make

4) Install DUST (with root privileges if needed):
  make install

   The default install folder should be /usr/local/bin
   Other install folders can be set by setting
   cmake -D CMAKE_INSTALL_PREFIX=/path/to/install/folder ../

If additional options are required they can be set during cmake setup either
by passing them as options:
 cmake -D OPT1=option_value -D OPT2=option_value
or by using the graphical cmake setup instead of the standard cmake:
  ccmake ../
and configure (change values, c to configure iteratively, g to generate makefile)
or a mix of the two indeed...

The most used options are:
-> If a specific compiler is required, set
   CMAKE_Fortran_COMPILER=ifort (for example)
-> If a specific cgns implementation is used, set the appropriate paths to the
   library with (see below to compile CGNS)
   CGNS_LIB
   CGNS_INC

the other options can be inspected with ccmake.

Additionally if a specific HDF5 implementation is used (see below to build HDF5
from scratch) , export the variable
 export HDF5_ROOT=/path/to/hdf5/root 
before calling cmake or ccmake.


DEPENDENCIES:
-------------------------------------------------------------------------------
As mentioned fairly recent linux distribution should have recent pre-packaged
versions of the required libraries either already installed or available from 
a package manager (e.g. apt install ...).

The required libraries which however are most likely to be too outdated or not
available are HDF5 and CGNS. If cmake when configuring DUST fails or during DUST
compilation such libraries cause problems those can be easily built by hand. 


HDF5 can be found packed in many distribution, and a super recent version is 
not usually necessary. 
However it can be easily built with the following procedure:
  * clone the desired version of HDF5 fromt the git repositories 
    (here racommended version 1.10.5):
     git clone -b hdf5-1_10_5 https://bitbucket.hdfgroup.org/scm/hdffv/hdf5.git
  
  * move into the folder, and build an install folder
     cd hdf5
     mkdir install

  * configure the installation
     ./configure --prefix=/absolute/path/to/install --enable-fortran

  * build & install
     make
     make install

CGNS can be found packed in some distributions, however tends to be outdated, 
and since CGNS tend to change radically the API behaviour it is often advised to
build it from the git repositories.
CGNs depends on HDF5: if a custom HDF5 is required build HDF5 first. 
  * clone the stable release from the git repositories (recommended 4.1.0)
    git clone -b v4.1.0 https://github.com/CGNS/CGNS.git

  * move into folder, create the installation folders
    cd CGNS
    mkdir build install
    cd build

  * configure the installation
    export HDF5_ROOT=/path/to/hdf5/installation (should not be necessary when employing system libraries)
    cmake -D CGNS_ENABLE_FORTRAN=ON -D CGNS_ENABLE_HDF5=ON -D CMAKE_INSTALL_PREFIX=../install ../

  * build & install
    make 
    make install

Ubuntu 20.04
  * apt install libcgns-dev libhdf5-dev libopenblas0

KNOWN ISSUES:
-------------------------------------------------------------------------------

 * On debian, the Lapack and BLAS system libraries are not properly linked. 
   The user must link /usr/lib/liblapack.so.3 and /usr/lib/libblas.so.3 to 
   /usr/lib/liblapack.so and /usr/lib/libblas.so respectively.
   Only then the cmake configuration, as well as the linker ld, should 
   work properly. 

 * Depending on the system, the Lapack/BLAS implementation might not be 
   thread parallel. Usually installing the ATLAS implementation of the BLAS 
   routines should override the serial libraries and allow for parallel 
   execution
