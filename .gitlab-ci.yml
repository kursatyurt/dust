# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

variables:
  WITH_PRECICE: "NO"
  CMAKE_BUILD_TYPE: "Release"

#before_script:
#  - sudo apt-get update
#  - sudo apt install -y cmake gcc g++ gfortran libtool autoconf automake
#  - sudo apt-get install -y libcgns-dev libhdf5-dev libopenblas0 
before_script:
  - pip install h5py 

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - mkdir build && cd build 
    - cmake -D CMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -D WITH_PRECICE=$WITH_PRECICE ../
    - make -j8
    - echo "Build $CMAKE_BUILD_TYPE, USE_PRECICE =$WITH_PRECICE completed"

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - python tests/run_a.py
    - python tests/run_b.py
    - python tests/mir_test/static/run_mir_static_ll.py
    - python tests/mir_test/static/run_mir_static_v.py
    - python tests/mir_test/static/run_mir_static_p.py
    # todo: static nl_vl
    - python tests/mir_test/dynamic/run_mir_dynamic_ll.py
    - python tests/mir_test/dynamic/run_mir_dynamic_v.py
    - python tests/mir_test/dynamic/run_mir_dynamic_p.py
    # todo: dynamic nl_vl

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - echo "Linting code... This will take about 10 seconds."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  script:
    - echo "Deploying application..."
